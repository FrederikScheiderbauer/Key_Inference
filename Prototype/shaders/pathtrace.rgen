/*
 * Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

//-------------------------------------------------------------------------------------------------
// Implementation of the RTX Ray-Generation shader.
// The implortant code for shading is in pathtrace.glsl

#version 460
#extension GL_GOOGLE_include_directive : enable         // To be able to use #include
#extension GL_EXT_ray_tracing : require                 // This is about ray tracing
#extension GL_KHR_shader_subgroup_basic : require       // Special extensions to debug groups, warps, SM, ...
#extension GL_EXT_scalar_block_layout : enable          // Align structure layout to scalar
#extension GL_EXT_nonuniform_qualifier : enable         // To access unsized descriptor arrays
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters
#extension GL_EXT_scalar_block_layout : enable          // Usage of 'scalar' block layout

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_atomic_int64 : enable

#extension GL_NV_shader_invocation_reorder : enable

#include "host_device.h"

#include "globals.glsl"
#include "layouts.glsl"

layout(location = 0) rayPayloadEXT PtPayload prd;

layout(location = 1) rayPayloadEXT ShadowHitPayload shadow_payload;


layout(location = 0) hitObjectAttributeNV vec3 objAttribs;

layout(constant_id = 0) const uint SORTING_MODE = 0;
layout(constant_id = 1) const int NUM_COHERENCE_BITS = 32;
layout(constant_id = 2) const bool USE_PROFILING = true;


layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};


#include "traceray_rtx.glsl"

#include "pathtrace.glsl"
#include "random.glsl"
#include "common.glsl"
#include "profiler.glsl"


uint chooseSortMode()
{
  uint v1 = pcg(prd.seed);
  uint v2 = pcg(prd.seed);
  uint s_Mode = tea(v1,v2) % (eNumSortModes-1);
  return s_Mode;
}

/*
START_ENUM(SortingMode)
  eNoSorting   = 0, //
  eHitObject   = 1, //
  eOrigin      = 2, //
  eReis        = 3, // Sort by Origin Direction
  eCosta       = 4, // Sort by Direction Origin
  eAila        = 5, // Sort by Origin Direction Interleaved
  eTwoPoint    = 6, // Sort by Origin and Termination point after AS traversal
  eEndPointEst = 7, // Sort by Origin and estimated ray endpoint
  eEndEstAdaptive = 8, //
  eInferKey    = 9,
  eNumSortModes = 10 //  Number of actual Sorting Modes
END_ENUM();
*/

/*
  uint activeMode;
  uint64_t noSortTime;
  uint64_t hitObjectTime;
  uint64_t originTime;
  uint64_t reisTime;
  uint64_t costaTime;
  uint64_t ailaTime;
  uint64_t endPointEstTime;
  uint64_t endEstAdaptiveTime;
*/

void main()
{
  setupProfiler();
  
  uint accumulationFrames = 20;


  ivec2 imageRes    = rtxState.size;
  ivec2 imageCoords = ivec2(gl_LaunchIDEXT.xy);

  int ID = imageCoords.y * imageRes.x + imageCoords.x;

  // Initialize the seed for the random number
  prd.seed = initRandom(gl_LaunchSizeEXT.xy, gl_LaunchIDEXT.xy, rtxState.frame);
  uint sortMode;
  if(SORTING_MODE == eInferKey)
  {
    //if first frame use random sorting Mode and accumulate
    //if(rtxState.frame < accumulationFrames)
    //{
      //sortMode = chooseSortMode();
      sortMode = rtxState.frame % (eNumSortModes-1);
    //}
    /*
    else {
      sortMode = 1;
    }
    */
    if(rtxState.frame < 1)
    {
      resetTimings(ID);
      
    }
  }


  uint64_t start = clockRealtimeEXT();  // Debug - Heatmap
  vec3 pixelColor = vec3(0);
  for(int smpl = 0; smpl < rtxState.maxSamples; ++smpl)
  {

    pixelColor += samplePixel(imageCoords, imageRes);  // See pathtrace.glsl
  }
  uint64_t end  = clockRealtimeEXT();
  uint64_t duration = end -start;


  if(USE_PROFILING)
  {

    profilingStats[ID].shadeTiming.abs_time += prd.shadeTiming;
    profilingStats[ID].sortTiming.abs_time += prd.sortTiming;
    profilingStats[ID].rtTiming.abs_time += prd.rtTiming;
    profilingStats[ID].traceTiming.abs_time += duration;

    if(rtxState.frame < 1)
    {

      profilingStats[ID].shadeTiming.avg_time = prd.shadeTiming;
      profilingStats[ID].sortTiming.avg_time = prd.sortTiming;
      profilingStats[ID].rtTiming.avg_time = prd.rtTiming;
      profilingStats[ID].traceTiming.avg_time = duration;
    }
    else {
      
      profilingStats[ID].shadeTiming.avg_time = profilingStats[ID].shadeTiming.abs_time / (rtxState.frame+1);
      profilingStats[ID].sortTiming.avg_time = profilingStats[ID].sortTiming.abs_time / (rtxState.frame+1);
      profilingStats[ID].rtTiming.avg_time = profilingStats[ID].rtTiming.abs_time / (rtxState.frame+1);
      profilingStats[ID].traceTiming.avg_time = profilingStats[ID].traceTiming.abs_time / (rtxState.frame+1);
    }
  }

  pixelColor /= rtxState.maxSamples;



  if(SORTING_MODE==eInferKey)
  {
    //if(rtxState.frame < accumulationFrames && prd.hitT != INFINITY)
    //{
      accumulateSamplesAdd(sortMode,duration);
      //accumulateSamplesMax(sortMode,duration);
    //}
    timeData.frame = uint(rtxState.frame);

    atomicAdd(timeData.full_time,duration);
    atomicAdd(timeData.full_time_threads,1);
    
    
    //atomicMax(timeData.full_time,duration);
    //atomicMax(timeData.full_time_threads,1);
  }

  // Debug - Heatmap
  if(rtxState.debugging_mode == eHeatmap)
  {
    
    float    low  = rtxState.minHeatmap;
    float    high = rtxState.maxHeatmap;
    float    val  = clamp((float(end - start) - low) / (high - low), 0.0, 1.0);
    

    pixelColor    = temperature(val);
    //pixelColor    = temperature(val2);
    imageStore(resultImage, imageCoords, vec4(pixelColor, 1.f));
    return;

    // Wrap & SM visualization
    // pixelColor = temperature(float(gl_SMIDNV) / float(gl_SMCountNV - 1)) * float(gl_WarpIDNV) / float(gl_WarpsPerSMNV - 1);
  }

  // Do accumulation over time
  if(rtxState.frame > 0)
  {
    vec3 old_color  = imageLoad(resultImage, imageCoords).xyz;
    vec3 new_result = mix(old_color, pixelColor, 1.0f / float(rtxState.frame + 1));

    imageStore(resultImage, imageCoords, vec4(new_result, 1.f));
  }
  else
  {
    // First frame, replace the value in the buffer
    imageStore(resultImage, imageCoords, vec4(pixelColor, 1.f));

  }

}
